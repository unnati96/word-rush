import React, { Component } from 'react';
import Words from './Words';
import swal from 'sweetalert';

const wordArr = [
["able",
"acid",
"aged",
"also",
"area",
"army",
"away",
"baby",
"back",
"ball",
"band",
"bank",
"base",
"bath",
"bear",
"beat",
"been",
"beer",
"bell",
"belt",
"best",
"bill",
"bird",
"blow",
"blue",
"boat",
"body",
"bomb",
"bond",
"bone",
"book",
"boom",
"born",
"boss",
"both",
"bowl",
"bulk",
"burn",
"bush",
"busy",
"call",
"calm",
"came",
"camp",
"card",
"care",
"case",
"cash",
"cast",
"cell",
"chat",
"chip",
"city",
"club",
"coal",
"coat",
"code",
"cold",
"come",
"cook",
"cool",
"cope",
"copy",
"CORE",
"cost",
"crew",
"crop",
"dark",
"data",
"date",
"dawn",
"days",
"dead",
"deal",
"dean",
"dear",
"debt",
"deep",
"deny",
"desk",
"dial",
"diet",
"disc",
"disk",
"does",
"done",
"door",
"dose",
"down",
"draw",
"drew",
"drop",
"drug",
"dual",
"duke",
"dust",
"duty",
"each",
"earn",
"ease",
"east"],
[
"above",
"abuse",
"actor",
"acute",
"admit",
"adopt",
"adult",
"after",
"again",
"agent",
"agree",
"ahead",
"alarm",
"album",
"alert",
"alike",
"alive",
"allow",
"alone",
"along",
"alter",
"among",
"anger",
"Angle",
"angry",
"apart",
"apple",
"apply",
"arena",
"argue",
"arise",
"array",
"aside",
"asset",
"audio",
"audit",
"avoid",
"award",
"aware",
"badly",
"baker",
"bases",
"basic",
"basis",
"beach",
"began",
"begin",
"begun",
"being",
"below",
"bench",
"billy",
"birth",
"black",
"blame",
"blind",
"block",
"blood",
"board",
"boost",
"booth",
"bound",
"brain",
"brand",
"bread",
"break",
"breed",
"brief",
"bring",
"broad",
"broke",
"brown",
"build",
"built",
"buyer",
"cable",
"calif",
"carry",
"catch",
"cause",
"chain",
"chair",
"chart",
"chase",
"cheap",
"check",
"chest",
"chief",
"child",
"china",
"chose",
"civil",
"claim",
"class",
"clean",
"clear",
"click",
"clock",
"close",
"coach",
"coast",
"could",
"count",
"court",
"cover",
"craft",
"crash",
"cream",
"crime",
"cross",
"crowd",
"crown",
"curve",
"cycle",
"daily",
"dance",
"dated",
"dealt",
"death",
"debut",
"delay",
"depth",
"doing",
"doubt",
"dozen",
"draft",
"drama",
"drawn",
"dream",
"dress",
"drill",
"drink",
"drive",
"drove",
"dying",
"eager",
"early",
"earth",
"eight",
"elite",
"empty",
"enemy",
"enjoy",
"enter",
"entry",
"equal",
"error",
"event",
"every",
"exact",
"exist",
"extra",
"faith",
"false",
"fault",
"fiber",
"field",
"fifth",
"fifty",
"fight",
"final",
"first",
"fixed",
"flash",
"fleet",
"floor",
"fluid",
"focus",
"force",
"forth",
"forty",
"forum",
"found",
"frame",
"frank",
"fraud",
"fresh",
"front",
"fruit",
"fully",
"funny",
"giant",
"given",
"glass",
"globe",
"going",
"grace",
"grade",
"grand",
"grant",
"grass",
"great",
"green",
"gross",
"group",
"grown",
"guard",
"guess",
"guest",
"guide",
"happy",
"harry",
"heart",
"heavy",
"hence",
"henry",
"horse",
"hotel",
"house",
"human",
"ideal",
"image",
"index",
"inner",
"input",
"issue",
"japan",
"jimmy",
"joint",
"jones",
"judge",
"known",
"label",
"large",
"laser",
"later",
"laugh",
"layer",
"learn",
"lease",
"least",
"leave",
"legal",
"level",
"lewis",
"light",
"limit",
"links",
"lives",
"local",
"logic",
"loose",
"lower",
"lucky",
"lunch",
"lying",
"magic",
"major",
"maker",
"march",
"maria",
"match",
"maybe",
"mayor",
"meant",
"media",
"metal",
"might",
"minor",
"minus",
"mixed",
"model",
"money",
"month",
"moral",
"motor",
"mount",
"mouse",
"mouth",
"movie",
"music",
"needs",
"never",
"newly",
"night",
"noise",
"north",
"noted",
"novel",
"nurse",
"occur",
"ocean",
"offer",
"often",
"order",
"other",
"ought",
"paint",
"panel",
"paper",
"party",
"peace"
],
["abroad",
"accept",
"access",
"across",
"acting",
"action",
"active",
"actual",
"advice",
"advise",
"affect",
"afford",
"afraid",
"agency",
"agenda",
"almost",
"always",
"amount",
"animal",
"annual",
"answer",
"anyone",
"anyway",
"appeal",
"appear",
"around",
"arrive",
"artist",
"aspect",
"assess",
"assist",
"assume",
"attack",
"attend",
"august",
"author",
"avenue",
"backed",
"barely",
"battle",
"beauty",
"became",
"become",
"before",
"behalf",
"behind",
"belief",
"belong",
"berlin",
"better",
"beyond",
"bishop",
"border",
"bottle",
"bottom",
"bought",
"branch",
"breath",
"bridge",
"bright",
"broken",
"budget",
"burden",
"bureau",
"button",
"camera",
"cancer",
"cannot",
"carbon",
"career",
"castle",
"casual",
"caught",
"center",
"centre",
"chance",
"change",
"charge"],
["ability",
"absence",
"academy",
"account",
"accused",
"achieve",
"acquire",
"address",
"advance",
"adverse",
"advised",
"adviser",
"against",
"airline",
"airport",
"alcohol",
"alleged",
"already",
"analyst",
"ancient",
"another",
"anxiety",
"anxious",
"anybody",
"applied",
"arrange",
"arrival",
"article",
"assault",
"assumed",
"assured",
"attempt",
"attract",
"auction",
"average",
"backing",
"balance",
"banking",
"barrier",
"battery",
"bearing",
"beating",
"because",
"bedroom",
"believe",
"beneath",
"benefit",
"besides",
"between",
"billion",
"binding",
"brother",
"brought",
"burning",
"cabinet",
"caliber",
"calling",
"capable",
"capital",
"captain",
"caption",
"capture",
"careful",
"carrier",
"caution",
"ceiling",
"central",
"centric",
"century",
"certain",
"chamber",
"channel",
"chapter",
"charity"]
];

class Game extends Component {
  state = {
    level: 0,
    score: 0,
    currentIndex: -1,
    shuffledWords: [],
    timer: 30,
    win: false,
    currentWord: '',
    levelChange: false
  }

  componentDidMount() {
    const shuffledArr = this.shuffle(wordArr[0]);
    const current = shuffledArr[0].toUpperCase();
    this.setState({shuffledWords: shuffledArr, currentIndex: 0, currentWord: current, level: 1});
    setInterval(this.reduceTimer, 1000)
  }

  reduceTimer = () => {
    this.setState(prevState => {
      return {timer: prevState.timer - 1}
    });
  }

  shuffle = (arr) => {
    const arra1 = [...arr]
    let ctr = arra1.length, temp, index;
    while (ctr > 0) {
        index = Math.floor(Math.random() * ctr);
        ctr--;
        temp = arra1[ctr];
        arra1[ctr] = arra1[index];
        arra1[index] = temp;
    }
    return arra1;
  }

  nextWord = () => {
    if ((this.state.currentIndex + 1) === this.state.shuffledWords.length) {
      this.setState({win: true});
    } else {
      if (this.state.currentIndex === 4 && this.state.level !== 4) {
        const shuffledArr = this.shuffle(wordArr[this.state.level]);
        const current = shuffledArr[0].toUpperCase();
        const newLevel = this.state.level + 1;
        const timeLeft = this.state.timer + 10 * this.state.level;
        const newScore = this.state.score + 1 * this.state.level;
        // swal(`You Crossed Level ${this.state.level}!`, "Congratulations!", "success").then(() => {
        //   this.setState({shuffledWords: shuffledArr, currentIndex: 0, currentWord: current, level: newLevel, timer: timeLeft, score: newScore});
        // })
        this.setState({shuffledWords: shuffledArr, currentIndex: 0, currentWord: current, level: newLevel, timer: timeLeft, score: newScore, levelChange: true});
        setTimeout(this.levelHandle, 500);
      } else {
        const index = this.state.currentIndex + 1;
        const timeLeft = this.state.timer + 2;
        const newScore = this.state.score + 1 * this.state.level;
        const current = this.state.shuffledWords[index].toUpperCase();
        this.setState({currentIndex: index, timer: timeLeft, currentWord: current, score: newScore});
      }
    }
  }

  levelHandle = () => {
    this.setState({levelChange: false});
  }

  render() {
    let action = (
      <div className="white"> 
        <p className="tc f3"> Time Left : &nbsp; 
          <span className={`${this.state.timer < 10 ? 'red' : ''}`}>{this.state.timer}</span> 
        </p>
        <p className="tc f3"> Level: {this.state.level} </p> 
        <p className="tc f3"> Score: {this.state.score} </p> 
        <Words word={this.state.currentWord} next = {this.nextWord}/> 
      </div>
      );

    if (this.state.timer <= 0) {
      action = (<div className="tc f3 white"> <p className="pa2"> Game Over !!!! </p> <p> Your Score is <span className="red fw7">{this.state.score} </span> </p> <p> Correct Word is : <span className="red fw7">{this.state.currentWord}</span></p></div>)
    }

    if (this.state.win) {
      action = (<div> <p> You Win !!! </p> <p> Your score is {this.state.score} </p> </div>)
    }

    if (this.state.levelChange) {
      action = (<div className = "white tc f3"> <p> Cogratulations !!! </p> <p> You Crossed Level {this.state.level - 1} </p></div>);
    } 

    return (

      <div className = "v-mid bg-black o-80 pv1 w-40-l w-80 ml-auto mr-auto">
        <div> {action} </div>
      </div>
    )
  }

}

export default Game;